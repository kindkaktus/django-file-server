"""
Django settings for django_file_server project.

Generated by 'django-admin startproject' using Django 1.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(PROJECT_ROOT, ...)
import os

# Build paths inside the project like this: os.path.join(PROJECT_ROOT, ...)
PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '-q@x+fbn4vl-+qs!*a=+(u%j1w76z_(7re-1*b+yb&a+rj=-&+'

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'file_list',
]

MIDDLEWARE_CLASSES = [
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
]

# Add this to tell Django where to redirect after
# successful login

LIST_FILES_URL = '/list/'
LOGIN_REDIRECT_URL = LIST_FILES_URL

ROOT_URLCONF = 'django_file_server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ["templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                # Insert your TEMPLATE_CONTEXT_PROCESSORS here or use this
                # list if you haven't customized them:
                'django.contrib.auth.context_processors.auth',
                'django.template.context_processors.debug',
                'django.template.context_processors.i18n',
                'django.template.context_processors.media',
                'django.template.context_processors.static',
                'django.template.context_processors.tz',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'intermediate': {
            'format': '%(asctime)s %(name)s <%(process)d> [%(levelname)s] "%(funcName)s() %(message)s"'
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': '/var/log/django-file-server/error.log',
            'formatter': 'intermediate',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'propagate': True,
            'level': 'INFO',
        },
        'file_list': {
            'handlers': ['file'],
            'propagate': True,
            'level': 'DEBUG',
        },
        'login': {
            'handlers': ['file'],
            'propagate': True,
            'level': 'DEBUG',
        },
    }
}

WSGI_APPLICATION = 'django_file_server.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join('/var/lib/django-file-server', 'db.sqlite3'),
    }
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

LOGIN_URL = '/login/'

#
# Handling medial files
#
# User downloads file under MEDIA_URL
#    -> django authenticates it and returns back to nginx with internal request to SENDFILE_URL
#        -> nginx maps this request to the file under SENDFILE_ROOT
# The reason to involve front-end webserver to serve files is efficiency (django can't efficiently server large files)
#
# IMPORTANT: KEEP THESE 3 VALUES IN SYNC WITH YOUR FRONT-END WEBSERVER
# https://pypi.python.org/pypi/django-sendfile/
SENDFILE_BACKEND = 'sendfile.backends.nginx'
SENDFILE_URL = '/media'
SENDFILE_ROOT = '/var/lib/django-file-server/media'

MEDIA_URL = '/download/'
# media files will be uploaded here
MEDIA_ROOT = SENDFILE_ROOT

#
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/
#

# Input location of static files
STATICFILES_DIRS = [
    os.path.join(PROJECT_ROOT, 'static'),
]
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
]
# Static files should be copied here to be served by the webserver
STATIC_ROOT = '/var/lib/django-file-server/static'
# URL of static files
STATIC_URL = '/static/'
